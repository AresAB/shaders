#version 330 core

layout(location = 0) out vec3 FragColor;

in vec2 TexCoord;

uniform sampler2D texture1;

// Circular Kernel from GPU Zen 'Practical Gather-based Bokeh Depth of Field' by Wojciech Sterna
const vec2 circle_offsets[48] = 
{
	2.0 * vec2(1.000000, 0.000000),
	2.0 * vec2(0.707107, 0.707107),
	2.0 * vec2(-0.000000, 1.000000),
	2.0 * vec2(-0.707107, 0.707107),
	2.0 * vec2(-1.000000, -0.000000),
	2.0 * vec2(-0.707106, -0.707107),
	2.0 * vec2(0.000000, -1.000000),
	2.0 * vec2(0.707107, -0.707107),
	
	4.0 * vec2(1.000000, 0.000000),
	4.0 * vec2(0.923880, 0.382683),
	4.0 * vec2(0.707107, 0.707107),
	4.0 * vec2(0.382683, 0.923880),
	4.0 * vec2(-0.000000, 1.000000),
	4.0 * vec2(-0.382684, 0.923879),
	4.0 * vec2(-0.707107, 0.707107),
	4.0 * vec2(-0.923880, 0.382683),
	4.0 * vec2(-1.000000, -0.000000),
	4.0 * vec2(-0.923879, -0.382684),
	4.0 * vec2(-0.707106, -0.707107),
	4.0 * vec2(-0.382683, -0.923880),
	4.0 * vec2(0.000000, -1.000000),
	4.0 * vec2(0.382684, -0.923879),
	4.0 * vec2(0.707107, -0.707107),
	4.0 * vec2(0.923880, -0.382683),

	6.0 * vec2(1.000000, 0.000000),
	6.0 * vec2(0.965926, 0.258819),
	6.0 * vec2(0.866025, 0.500000),
	6.0 * vec2(0.707107, 0.707107),
	6.0 * vec2(0.500000, 0.866026),
	6.0 * vec2(0.258819, 0.965926),
	6.0 * vec2(-0.000000, 1.000000),
	6.0 * vec2(-0.258819, 0.965926),
	6.0 * vec2(-0.500000, 0.866025),
	6.0 * vec2(-0.707107, 0.707107),
	6.0 * vec2(-0.866026, 0.500000),
	6.0 * vec2(-0.965926, 0.258819),
	6.0 * vec2(-1.000000, -0.000000),
	6.0 * vec2(-0.965926, -0.258820),
	6.0 * vec2(-0.866025, -0.500000),
	6.0 * vec2(-0.707106, -0.707107),
	6.0 * vec2(-0.499999, -0.866026),
	6.0 * vec2(-0.258819, -0.965926),
	6.0 * vec2(0.000000, -1.000000),
	6.0 * vec2(0.258819, -0.965926),
	6.0 * vec2(0.500000, -0.866025),
	6.0 * vec2(0.707107, -0.707107),
	6.0 * vec2(0.866026, -0.499999),
	6.0 * vec2(0.965926, -0.258818),
};

const vec2 box_offsets[24] = 
{
	vec2(0.),

    vec2(1., 0.),
	vec2(1., 1.),
	vec2(0., 1.),
	vec2(-1., 1.),
	vec2(-1., 0.),
	vec2(-1., -1.),
	vec2(0., -1.),
	vec2(1., -1.),

    vec2(2., 0.),
    vec2(2., 1.),
	vec2(2., 2.),
    vec2(1., 2.),
	vec2(0., 2.),
    vec2(-1., 2.),
	vec2(-2., 2.),
	vec2(-2., 1.),
	vec2(-2., 0.),
	vec2(-2., -1.),
	vec2(-2., -2.),
	vec2(-1., -2.),
	vec2(0., -2.),
	vec2(1., -2.),
	vec2(2., -2.),
};

const vec2 tri_offsets[10] = 
{
	vec2(0.),

    vec2(0.5, -0.5),
    vec2(-0.5, -0.5),
	vec2(0., 0.707),

    vec2(1., -1.),
	vec2(0., -1.),
    vec2(-1., -1.),
	vec2(-0.5, 0.707),
	vec2(0., 1.414),
	vec2(0.5, 0.707),
};

const vec2 r_tri_offsets[10] = 
{
	vec2(0.),

    vec2(-0.5, -0.5),
    vec2(-0.5, 0.5),
	vec2(0.5, -0.5),

    vec2(-0.7, -0.7),
	vec2(-0.7, 0.15),
    vec2(-0.7, 1.),
	vec2(0.15, 0.15),
    vec2(1., -0.7),
	vec2(0.15, -0.7),
};

const vec2 hex_offsets[19] = 
{
	vec2(0.),

	vec2(0.5, 0.866),
	vec2(1., 0.),
	vec2(0.5, -0.866),
	vec2(-0.5, -0.866),
	vec2(-1., 0.),
	vec2(-0.5, 0.866),

    vec2(-1., 1.732),
    vec2(0., 1.732),
	vec2(1., 1.732),
	vec2(1.5, 0.866),
    vec2(2., 0.),
	vec2(1.5, -0.866),
    vec2(1., -1.732),
    vec2(0., -1.732),
	vec2(-1., -1.732),
	vec2(-1.5, -0.866),
	vec2(-2., 0.),
	vec2(-1.5, 0.866),
};

void main()
{
    float strength = 10.;

    vec3 color = vec3(0.);
    for (int i = 0; i < hex_offsets.length(); i++){
        color += texture(texture1, TexCoord + strength * hex_offsets[i] / textureSize(texture1, 0)).xyz;
    }
    color /= hex_offsets.length();
    FragColor = color;
}